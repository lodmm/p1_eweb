[
  {
    "courseID": 0,
    "title": "Intro to Computer Science & Programming Course - Udacity",
    "url": "https://www.udacity.com/course/cs101",
    "description": "Sign In Sign Up Catalog Nanodegree Intro to Computer Science Build a Search Engine & a Social Network    Beginner Approx. 3 months  Assumes 6hr/wk (work at your own pace)  Join 113,366 Students  VIEW TRAILER Course Summary  In this introduction to computer programming course, you\u2019ll learn and practice key computer science concepts by building your own versions of popular web applications. You\u2019ll learn Python, a powerful, easy-to-learn, and widely used programming language, and you\u2019ll explore computer science basics, as you build your own search engine and social network.  Why Take This Course?  You\u2019ll learn the programming language Python, and you\u2019ll explore foundational concepts in computer science. Most importantly, you\u2019ll start thinking like a software engineer by solving interesting problems (how to build a web crawler or a social network) using computer programming.  This course is a first step into the world of computer science, and whether you want to become a software engineer, or collaborate with software engineers, this course is for you. You\u2019ll be prepared for intermediate-level computer science classes when you\u2019ve mastered the concepts covered in this course.  Build a Search Engine:  Throughout this course, you\u2019ll build a search engine by learning about and producing key search engine components including a crawler, an index and a page rank algorithm. As you build these pieces, you\u2019ll be learning about and practicing computer science skills that will ready you for intermediate level computer science courses.  Build a Social Network:  At the end of the course we will give you a set of relationships (i.e. strings of phrases like \u201cDave likes Andy, Kathleen and Kristy\u201d) and you will use your new computer science skills to organize these relationships into a social network. With your new social network, you can explore relationships and gain insight into how you fit into your own social networks.  Prerequisites and Requirements  There is no prior computer programming knowledge needed for this course. Beginners are welcome!  See the Technology Requirements for using Udacity.  What Will I Learn?  Projects  Build a search engine throughout this course. Then, build a social network with your new skills!  Syllabus  Lesson 1: How to Get Started  Interview with Sergey Brin Getting Started with Python Processors Grace Hopper Variables Strings and Numbers Indexing Strings String Theory Lesson 2: How to Repeat  Introducing Procedures Sum Procedure with a Return Statement Equality Comparisons If Statements Or Function Biggest Procedure While Loops Print Numbers Lesson 2.5: How to Solve Problems  What are the Inputs Algorithm Pseudocode Optimizing Lesson 3: How to Manage Data  Nested Lists A List of Strings Aliasing List Operations List Addition and Length How Computers Store Data For Loops Popping Elements Crawl Web Lesson 4: Responding to Queries  Data Structures Lookup Building the Web Index Latency Bandwidth Buckets of Bits Protocols Lesson 5: How Programs Run  Measuring Speed Spin Loop Index Size vs. Time Making Lookup Faster Hash Function Testing Hash Functions Implementing Hash Tables Dictionaries Modifying the Search Engine Lesson 6: How to Have Infinite Power  Infinite Power Counter Recursive Definitions Recursive Procedures Palindromes Recursive v. Iterative Divide and Be Conquered Ranking Web Pages Lesson 7: Past, Present, and the Future of Computing  Past of Computing Computer History Museum First Hard Drive Search Before Computers Present of Computing Slac and Big Data Open Source Future of Computing Text Analysis Energy Aware Computing Computer Security Quantum Computing Enroll in Course  Start free trial $199/month after 14-day trial Best for learners serious about course completion & career advancement  What you get Instructor videos See All  Access Course Materials  Access course materials Free  What you get Instructor videos Learn by doing exercises and view project instructions Projects with reviews Stuck? Get help from Coaches Verified Certificate Instructors & Partners   \u25be Dave Evans INSTRUCTOR David Evans is a Professor of Computer Science at the University of Virginia where he teaches computer science and leads research in computer security. He is the author of an introductory computer science textbook and has won Virginia's highest award for university faculty. He has PhD, SM, and SB degrees from MIT.   View more courses in Data Science   View more courses in Web Development   View more courses in Software Engineering  Frequently Asked Questions  When does the course begin?  This class is self paced. You can begin whenever you like and then follow your own pace. It\u2019s a good idea to set goals for yourself to make sure you stick with the course.  How long will the course be available?  This class will always be available!  How do I know if this course is for me?  Take a look at the \u201cClass Summary,\u201d \u201cWhat Should I Know,\u201d and \u201cWhat Will I Learn\u201d sections above. If you want to know more, just enroll in the course and start exploring.  Can I skip individual videos? What about entire lessons?  Yes! The point is for you to learn what YOU need (or want) to learn. If you already know something, feel free to skip ahead. If you ever find that you\u2019re confused, you can always go back and watch something that you skipped.  What are the rules on collaboration?  Collaboration is a great way to learn. You should do it! The key is to use collaboration as a way to enhance learning, not as a way of sharing answers without understanding them.  Why are there so many questions?  Udacity classes are a little different from traditional courses. We intersperse our video segments with interactive questions. There are many reasons for including these questions: to get you thinking, to check your understanding, for fun, etc... But really, they are there to help you learn. They are NOT there to evaluate your intelligence, so try not to let them stress you out.  What should I do while I\u2019m watching the videos?  Learn actively! You will retain more of what you learn if you take notes, draw diagrams, make notecards, and actively try to make sense of the material.  INFORMATION  Nanodegree Credentials  Georgia Tech Program  Udacity for Organizations  Help and FAQ  Feedback Program  COMMUNITY  Blog  News & Media  Developer API  UDACITY  About  Jobs  Contact Us  Legal  FOLLOW US ON      MOBILE APPS     Nanodegree is a trademark of Udacity \u00a9 2011-2015 Udacity, Inc."
  },
  {
    "courseID": 1,
    "title": "Intro to Physics Fundamentals Course (Physics 101) - Udacity",
    "url": "https://www.udacity.com/course/ph100",
    "description": "Sign In Sign Up Catalog Nanodegree Intro to Physics Landmarks in Physics    Beginner Approx. 2 months  Assumes 6hr/wk (work at your own pace)  Join 17,946 Students  VIEW TRAILER Course Summary  Study physics abroad in Europe -- virtually! Learn the basics of physics on location in Italy, the Netherlands and the UK, by answering some of the discipline's major questions from over the last 2000 years.  Why Take This Course?  This unique class gives you the chance to see the sites where physics history was made and learn some of the subject's most captivating concepts.  Prerequisites and Requirements  This course is suitable for anyone; a basic understanding of algebra is suggested.  See the Technology Requirements for using Udacity.  What Will I Learn?  Syllabus  Lesson 1: How can we measure the circumference of the Earth?  Basics of geometry and trigonometry  Lesson 2: How do objects move?  Data analysis and kinematics  Lesson 3: What causes motion?  Forces, acceleration, and Newton\u2019s Laws  Lesson 4: How can we use motion?  Work, energy, and simple machines  Lesson 5: How can we determine our longitude at sea?  Simple harmonic motion  Lesson 6: What is electricity?  Charge and electric fields  Lesson 7: What is left to discover?  Modern physics and open questions  Start Free Course  Start free course Free  What you get Instructor videos Learn by doing exercises Instructors & Partners   \u25be Andy Brown INSTRUCTOR Andy Brown is a Lead Instructor at Udacity. He has a degree in physics from MIT, and has devoted his time after graduating to teaching and learning. Since joining Udacity in 2012, Andy has helped design dozens of classes. He loves exploring this new educational medium by creating innovative and engaging courses. When he\u2019s not figuring out the best ways to transform minds, you can find Andy on his bike or in his car, exploring the amazing experiences that his new California home has to offer.  Frequently Asked Questions  When does the course begin?  This class is self paced. You can begin whenever you like and then follow your own pace. It\u2019s a good idea to set goals for yourself to make sure you stick with the course.  How long will the course be available?  This class will always be available!  How do I know if this course is for me?  Take a look at the \u201cClass Summary,\u201d \u201cWhat Should I Know,\u201d and \u201cWhat Will I Learn\u201d sections above. If you want to know more, just enroll in the course and start exploring.  Can I skip individual videos? What about entire lessons?  Yes! The point is for you to learn what YOU need (or want) to learn. If you already know something, feel free to skip ahead. If you ever find that you\u2019re confused, you can always go back and watch something that you skipped.  How much does this cost?  It\u2019s completely free! If you\u2019re feeling generous, we would love to have you contribute your thoughts, questions, and answers to the course discussion forum.  What are the rules on collaboration?  Collaboration is a great way to learn. You should do it! The key is to use collaboration as a way to enhance learning, not as a way of sharing answers without understanding them.  Why are there so many questions?  Udacity classes are a little different from traditional courses. We intersperse our video segments with interactive questions. There are many reasons for including these questions: to get you thinking, to check your understanding, for fun, etc... But really, they are there to help you learn. They are NOT there to evaluate your intelligence, so try not to let them stress you out.  What should I do while I\u2019m watching the videos?  Learn actively! You will retain more of what you learn if you take notes, draw diagrams, make notecards, and actively try to make sense of the material.  INFORMATION  Nanodegree Credentials  Georgia Tech Program  Udacity for Organizations  Help and FAQ  Feedback Program  COMMUNITY  Blog  News & Media  Developer API  UDACITY  About  Jobs  Contact Us  Legal  FOLLOW US ON      MOBILE APPS     Nanodegree is a trademark of Udacity \u00a9 2011-2015 Udacity, Inc."
  },
  {
    "courseID": 2,
    "title": "Intro to Statistics - Udacity",
    "url": "https://www.udacity.com/course/st101",
    "description": "Sign In Sign Up Catalog Nanodegree Intro to Statistics Making Decisions Based on Data    Beginner Approx. 2 months  Assumes 6hr/wk (work at your own pace)  Join 37,655 Students  VIEW TRAILER Course Summary  Statistics is about extracting meaning from data. In this class, we will introduce techniques for visualizing relationships in data and systematic techniques for understanding the relationships using mathematics.  Why Take This Course?  This course will cover visualization, probability, regression and other topics that will help you learn the basic methods of understanding data with statistics.  Prerequisites and Requirements  This course does not require any previous knowledge of statistics. Basic familiarity with algebra such as knowing how to compute the mean, median and mode of a set of numbers will be helpful.  See the Technology Requirements for using Udacity.  What Will I Learn?  Syllabus  Lesson 1: Visualizing relationships in data  Seeing relationships in data and predicting based on them; Simpson's paradox  Lesson 2: Probability  Probability; Bayes Rule; Correlation vs. Causation  Lesson 3: Estimation  Maximum Likelihood Estimation; Mean, Median, Mode; Standard Deviation, Variance  Lesson 4: Outliers and Normal Distribution  Outliers, Quartiles; Binomial Distribution; Central Limit Theorem; Manipulating Normal Distribution  Lesson 5: Inference  Confidence intervals; Hypothesis Testing  Lesson 6: Regression  Linear regression; correlation  Lesson 7: Final Exam  Start Free Course  Start free course Free  What you get Instructor videos Learn by doing exercises Instructors & Partners   \u25be Sebastian Thrun INSTRUCTOR Sebastian Thrun is a Research Professor of Computer Science at Stanford University, a Google Fellow, a member of the National Academy of Engineering and the German Academy of Sciences. Thrun is best known for his research in robotics and machine learning, specifically his work with self-driving cars.   View more courses in Data Science  Frequently Asked Questions  When does the course begin?  This class is self paced. You can begin whenever you like and then follow your own pace. It\u2019s a good idea to set goals for yourself to make sure you stick with the course.  How long will the course be available?  This class will always be available!  How do I know if this course is for me?  Take a look at the \u201cClass Summary,\u201d \u201cWhat Should I Know,\u201d and \u201cWhat Will I Learn\u201d sections above. If you want to know more, just enroll in the course and start exploring.  Can I skip individual videos? What about entire lessons?  Yes! The point is for you to learn what YOU need (or want) to learn. If you already know something, feel free to skip ahead. If you ever find that you\u2019re confused, you can always go back and watch something that you skipped.  How much does this cost?  It\u2019s completely free! If you\u2019re feeling generous, we would love to have you contribute your thoughts, questions, and answers to the course discussion forum.  What are the rules on collaboration?  Collaboration is a great way to learn. You should do it! The key is to use collaboration as a way to enhance learning, not as a way of sharing answers without understanding them.  Why are there so many questions?  Udacity classes are a little different from traditional courses. We intersperse our video segments with interactive questions. There are many reasons for including these questions: to get you thinking, to check your understanding, for fun, etc... But really, they are there to help you learn. They are NOT there to evaluate your intelligence, so try not to let them stress you out.  What should I do while I\u2019m watching the videos?  Learn actively! You will retain more of what you learn if you take notes, draw diagrams, make notecards, and actively try to make sense of the material.  INFORMATION  Nanodegree Credentials  Georgia Tech Program  Udacity for Organizations  Help and FAQ  Feedback Program  COMMUNITY  Blog  News & Media  Developer API  UDACITY  About  Jobs  Contact Us  Legal  FOLLOW US ON      MOBILE APPS     Nanodegree is a trademark of Udacity \u00a9 2011-2015 Udacity, Inc."
  },
  {
    "courseID": 3,
    "title": "Introduction to Algorithms Course Online - Udacity",
    "url": "https://www.udacity.com/course/cs215",
    "description": "Sign In Sign Up Catalog Nanodegree Intro to Algorithms Social Network Analysis    Intermediate Approx. 4 months  Assumes 6hr/wk (work at your own pace)  Join 18,604 Students  VIEW TRAILER Course Summary  Ever played the Kevin Bacon game? This class will show you how it works by giving you an introduction to the design and analysis of algorithms, enabling you to discover how individuals are connected.  Why Take This Course?  By the end of this class you will understand key concepts needed to devise new algorithms for graphs and other important data structures and to evaluate the efficiency of these algorithms.  Prerequisites and Requirements  This class assumes an understanding of programming at the level of CS101, including the ability to read and write short programs in Python; it also assumes a comfort level with mathematical notation at the level of high school Algebra II or the SATs.  See the Technology Requirements for using Udacity.  What Will I Learn?  Syllabus  Lesson 1: A Social Network Magic Trick  Objective: Become familiar with Algorithm Analysis.  Eulerian Path Correctness of Na\u00efve Russian Peasants Algorithm Measuring Time Steps for Naive, Steps for Russian Divide and Conquer Lesson 2: Growth Rates in Social Networks  Objective: Use mathematical tools to analyze how things are connected.  Chain, Ring and Grid Networks Big Theta Planar Graphs Nodes, Edges, Regions Growth Rate of Edges in Planar Graph Hypercube Randomly Generated Graphs N Squared Tangled Hypercube Lesson 3: Basic Graph Algorithms  Objective: Find the quickest route to Kevin Bacon.  Properties of Social Networks Clustering Coefficient Connected Components Running Time of Connected Components Checking Pairwise Connectivity Pairwise Shortest Path Depth vs. Breadth First Search Recursion Replacement Marvel \u201cSocial\u201d Network Finding Bridge Edges Lesson 4: It\u2019s Who You Know  Objective: Learn to keep track of your Best Friends using heaps.  Degree Centrality Top K Via Partitioning Three Partitioning Cases Properties of a Heap Patch Up a Heap Down Heapify Heap Sort Lesson 5: Strong and Weak Bonds  Objective: Work with Social Networks that have edge weights.  Make a Tree Strength of Connections Weighted Social Networks How to Find the Shortest Path Dijkstra\u2019s Shortest Path Algorithm Floyd-Warshall Intro Randomizing Clustering Coefficient Bounds on the Estimate Lesson 6: Hardness of Network Problems  Objective: Explore what it means for a Social Network problem to be \"harder\" than other.  Tetristan Exponential Running Time Degrees of Hardness Reduction: Long and Simple Path Polynomial Time Decidable Problems Non-deterministic Polynomial Time Decidable Problem Clique Problem in NP Find the Strangers Graph Coloring is NP-Complete Lesson 7: Review and Application  Interview with Peter Winker (Professor, Dartmouth College) on Names and Boxes Problem && Puzzles and Algorithms  Interview with Tina Eliassi-Rad (Professor, Rutgers University) on Statistical Measures in Network && Social Networks in Security and Protests  Interview with Andrew Goldberg (Principal Researcher, Microsoft Research) on Practical Algorithms  Interview with Vukosi Marivate (Graduate Student, Rutgers University) on Social Algorithms  Interview with Duncan Watts (Principal Researcher, Microsoft) on Pathway That Can Use Two Nodes  Intro to Graph Search Animation  Start Free Course  Start free course Free  What you get Instructor videos Learn by doing exercises Instructors & Partners   \u25be Michael Littman INSTRUCTOR Michael Littman is a Professor of Computer Science at Brown University. He also teaches Udacity\u2019s Machine Learning courses: Supervised Learning, Unsupervised Learning and Reinforcement Learning.  Prior to joining Brown in 2012, he led the Rutgers Laboratory for Real-Life Reinforcement Learning (RL3) at Rutgers, where he served as the Computer Science Department Chair from 2009-2012. He is a Fellow of the Association for the Advancement of Artificial Intelligence (AAAI), served as program chair for AAAI's 2013 conference and the International Conference on Machine Learning in 2009.  Michael has received university-level teaching awards at both Duke and Rutgers.   View more courses in Software Engineering  Frequently Asked Questions  When does the course begin?  This class is self paced. You can begin whenever you like and then follow your own pace. It\u2019s a good idea to set goals for yourself to make sure you stick with the course.  How long will the course be available?  This class will always be available!  Can I skip individual videos? What about entire lessons?  Yes! The point is for you to learn what YOU need (or want) to learn. If you already know something, feel free to skip ahead. If you ever find that you\u2019re confused, you can always go back and watch something that you skipped.  What are the rules on collaboration?  Collaboration is a great way to learn. You should do it! The key is to use collaboration as a way to enhance learning, not as a way of sharing answers without understanding them.  Why are there so many questions?  Udacity classes are a little different from traditional courses. We intersperse our video segments with interactive questions. There are many reasons for including these questions: to get you thinking, to check your understanding, for fun, etc... But really, they are there to help you learn. They are NOT there to evaluate your intelligence, so try not to let them stress you out.  What should I do while I\u2019m watching the videos?  Learn actively! You will retain more of what you learn if you take notes, draw diagrams, make notecards, and actively try to make sense of the material.  INFORMATION  Nanodegree Credentials  Georgia Tech Program  Udacity for Organizations  Help and FAQ  Feedback Program  COMMUNITY  Blog  News & Media  Developer API  UDACITY  About  Jobs  Contact Us  Legal  FOLLOW US ON      MOBILE APPS     Nanodegree is a trademark of Udacity \u00a9 2011-2015 Udacity, Inc."
  },
  {
    "courseID": 4,
    "title": "Web Development Online Course - Udacity",
    "url": "https://www.udacity.com/course/cs253",
    "description": "Sign In Sign Up Catalog Nanodegree Web Development How to Build a Blog    Intermediate Approx. 3 months  Assumes 6hr/wk (work at your own pace)  Join 56,901 Students  VIEW TRAILER Course Summary  Try to picture yourself sitting down with your computer, ready to start developing a fully functional web application for the first time, available online for millions to use. \u201cWhere should I even begin? How long is this going to take me? Am I making any mistakes along the way?\u201d The questions may leave you with an uneasy feeling that you will learn many lessons the hard way.  In this intermediate course, Steve Huffman will teach you everything he wished he knew when he started building Reddit and, more recently, Hipmunk, as a lead engineer. Starting from the basics of how the web works, this course will walk you through core web development concepts such as how internet and browsers fit together, form validations, databases, APIs, integrating with other websites, scaling issues, and more; all of which form part of the knowledge it takes to build a web application of your own.  Why Take This Course?  By taking this course, you will embark on a digital adventure to build your very own application live on the web. Valuable lessons often come from experience, and it\u2019s from this experience that Steve brings a fresh perspective to the classroom to show you how to approach building your web application in a way that assuages the potential challenges you may face. In this course, you will learn by doing. Once you dive into the course experience, you will work on awesome projects:  Have you ever thought about what it takes to build a blog from the ground up? Over the course of six lessons, you will build a blog together with Steve that will be fully functional, online, for anybody to read by the end of the course.  Have you ever wondered how a wiki works? As a final project for this course, you will be able to take all of your newly gained knowledge and apply it to build a complete wiki.  This course concentrates on back-end development, but regardless if you are interested in front-end development, back-end development, or anywhere in between the stack, this course will teach you the fundamental knowledge you need break into the web development world. Are you ready to dive in?  Prerequisites and Requirements  In order to take the full advantage of this course, we want you to be well prepared for it. This course assumes an intermediate proficiency programming with Python, as well as a solid knowledge on the following topics:  Basic computer science concepts such as procedures, decision statements, and loops. Basic data structures such as lists, dictionaries, and hash tables. Object-oriented programming. Please feel free to peek at the Intro to Computer Science and Programming Foundations with Python courses to make sure you are comfortable with these required concepts for the course.  See the Technology Requirements for using Udacity.  What Will I Learn?  Projects  Make a webpage that anyone can add to and edit.  Syllabus  Lesson 1: How the Web Works (2.5 hours)  In this first lesson, you will learn basic concepts regarding the internet, browsers, HTML, and how all those elements fit together. You\u2019ll start using HTML (HyperText Markup Language) to format content for webpages. Then you\u2019ll get to see the mechanics of how the web works: HyperText Transfer Protocol (HTTP) via GET and POST requests. In the first problem set, you will get a simple website up and running with the Google App Engine platform.  Lesson 2: Forms and Input (4 hours)  In this second lesson you will learn about forms, a very common way to obtain input from users. You will learn how to get and process user input from webpages using Google App Engine to get a live form up and running. By the end of this lesson, you will know how to validate user input and securely obtain data from users.  Lesson 3: Databases (6 hours)  You learned about getting all sorts of information from users in the previous lesson, but what do you do with it once it\u2019s in your hands? You store it! In this third lesson, Steve will dive in and teach you what you need to know about databases, the final piece you need to start setting your blog in motion! You will learn about various database technologies, SQL, and the Google App Engine Datastore.  Lesson 4: User Accounts and Security (6 hours)  In this fourth lesson, you will learn the fundamentals of authentication and security, which are very relevant topics in almost any web application built today. We\u2019ll start by examining how websites use cookies to authenticate users and how we can manage cookies from the backend of a web application. You will implement a login system for your blog and learn how to use hashing to securely read and transmit user passwords.  Lesson 5: APIs (4.5 hours)  Up until now, your programs have generated HTML that a browser can use to render a web page for the user. In the digital world, however, applications and websites communicate not only with people, but also with other applications and websites. By the end of this lesson, your blog will communicate with humans as well as with other computers. Your web application can generate data in formats such as XML and JSON that other computers can access through an API, or application programming interface. Those computers, in turn, can build websites or services that interact with your data. You\u2019ll first learn how to use APIs, and then build web applications as services so that other computers can glean data from your application. We will look at both XML and JSON by investigating how to read them, how to interpret them, and how to manipulate them.  Lesson 6: Caching (3.5 hours)  In this lesson, we will explore how to prepare your applications to run at a large scale. So far, we've written 'toy' applications for just one or two users. If we want to start writing apps for thousands or, perhaps, even millions of users, then obviously we'll need to think about scaling. When we talk about scaling, this may mean running your application on multiple machines, storing huge amounts of data, or consuming large amounts of bandwidth. In particular, we will learn about caching, including the uses of caching, why you might want to cache, and specific caching implementations such as Memcached.  Lesson 7: Scaling Up (2.5 hours)  In this last lesson of the course, Steve has prepared a relaxing, story-time segment. You will hear web development anecdotes from people who have been through it all. You will enjoy interviews with engineer Neil Williams from Reddit, and engineer Chris Chew from Udacity. They will share their experiences on working with web applications, and you will see how all that you\u2019ve learned in this course comes into the big picture.  Final Project (8 hours)  For the final project, you will build a fully functional wiki - a website that allows any page to be edited. The wiki you will be able to build by the end of the course will feature the following:  Easily create new pages of the site by using the wiki edit capabilities. You should be able to enter a non-existent URL, redirect to an edit page, and create a new page from there. Have user accounts so that logged-in users only will have edit privileges. Use caching functionality. Have a history section which displays the different wiki versions that have existed. Enroll in Course  Start free trial $199/month after 14-day trial Best for learners serious about course completion & career advancement  What you get Instructor videos See All  Access Course Materials  Access course materials Free  What you get Instructor videos Learn by doing exercises and view project instructions Projects with reviews Stuck? Get help from Coaches Verified Certificate Instructors & Partners   \u25be Steve Huffman INSTRUCTOR Steve Huffman co-founded the social news site reddit.com in 2005 with his college roommate. reddit.com has since grown into one of the largest communities online. In 2010, he co-founded Hipmunk, a company to take the agony out of searching for plane and hotel tickets. Steve was named to Inc. Magazine's 30 under 30 list in 2011. He studied Computer Science at the University of Virginia.   \u25b8 Sean Bennett COURSE DEVELOPER  View more courses in Web Development  Frequently Asked Questions  When does the course begin?  This class is self paced. You can begin whenever you like and then follow your own pace. It\u2019s a good idea to set goals for yourself to make sure you stick with the course.  How long will the course be available?  This class will always be available!  How do I know if this course is for me?  Take a look at the \u201cClass Summary,\u201d \u201cWhat Should I Know,\u201d and \u201cWhat Will I Learn\u201d sections above. If you want to know more, just enroll in the course and start exploring.  Can I skip individual videos? What about entire lessons?  Yes! The point is for you to learn what YOU need (or want) to learn. If you already know something, feel free to skip ahead. If you ever find that you\u2019re confused, you can always go back and watch something that you skipped.  What are the rules on collaboration?  Collaboration is a great way to learn. You should do it! The key is to use collaboration as a way to enhance learning, not as a way of sharing answers without understanding them.  Why are there so many questions?  Udacity classes are a little different from traditional courses. We intersperse our video segments with interactive questions. There are many reasons for including these questions: to get you thinking, to check your understanding, for fun, etc... But really, they are there to help you learn. They are NOT there to evaluate your intelligence, so try not to let them stress you out.  What should I do while I\u2019m watching the videos?  Learn actively! You will retain more of what you learn if you take notes, draw diagrams, make notecards, and actively try to make sense of the material.  INFORMATION  Nanodegree Credentials  Georgia Tech Program  Udacity for Organizations  Help and FAQ  Feedback Program  COMMUNITY  Blog  News & Media  Developer API  UDACITY  About  Jobs  Contact Us  Legal  FOLLOW US ON      MOBILE APPS     Nanodegree is a trademark of Udacity \u00a9 2011-2015 Udacity, Inc."
  },
  {
    "courseID": 5,
    "title": "Software Testing Methodologies Class Online - Udacity",
    "url": "https://www.udacity.com/course/cs258",
    "description": "Sign In Sign Up Catalog Nanodegree Software Testing How to Make Software Fail    Intermediate Approx. 1 month  Assumes 6hr/wk (work at your own pace)  Join 14,683 Students  VIEW TRAILER Course Summary  When writing software, destruction can be just as valuable as creation. Learn how to catch bugs and break software as you discover different testing methods that will help you build better software.  Why Take This Course?  This course will teach you how to think like a software tester, how to find bugs in code earlier, and write better code.  Prerequisites and Requirements  Programming experience is required.  See the Technology Requirements for using Udacity.  What Will I Learn?  Syllabus  Lesson 1: Domains, Ranges, Oracles, and Kinds of Testing  How to think about the different elements of software testing  Lesson 2: Code Coverage  How to find parts of a program that need more testing  Lesson 3: Random Testing  How to automatically generate test cases that break code in unexpected ways  Lesson 4: Advanced Random Testing  How to engineer a sophisticated random test case generator  Lesson 5: Consequences  How to deal with lots of bugs, how to take a big input that triggers a bug and make it smaller, how to report a bug, and more!  Lesson 6: Conclusion  Start Free Course  Start free course Free  What you get Instructor videos Learn by doing exercises Instructors & Partners   \u25be John Regehr INSTRUCTOR John Regehr is a computer science professor at the University of Utah. His research is on making software fail and on making software that fails less often. Lately, he is obsessed with compiler bugs and integer overflow problems.   \u25b8 Sean Bennett COURSE DEVELOPER  View more courses in Software Engineering  INFORMATION  Nanodegree Credentials  Georgia Tech Program  Udacity for Organizations  Help and FAQ  Feedback Program  COMMUNITY  Blog  News & Media  Developer API  UDACITY  About  Jobs  Contact Us  Legal  FOLLOW US ON      MOBILE APPS     Nanodegree is a trademark of Udacity \u00a9 2011-2015 Udacity, Inc."
  },
  {
    "courseID": 6,
    "title": "Programming Languages: Building A Web Browser - Udacity",
    "url": "https://www.udacity.com/course/cs262",
    "description": "Sign In Sign Up Catalog Nanodegree Programming Languages Building a Web Browser    Intermediate Approx. 2 months  Assumes 6hr/wk (work at your own pace)  Join 17,905 Students  VIEW TRAILER Course Summary  This class will give you an introduction to the fundamentals of programming languages. Key concepts include how to specify and process valid strings, sentences and program structures.  Why Take This Course?  Take this class and learn how to build your own simple web browser complete with the ability to parse and understand HTML and JavaScript.  Prerequisites and Requirements  This course assumes previous programming experience, comparable to what is covered by the Udacity CS101 course.  See the Technology Requirements for using Udacity.  What Will I Learn?  Syllabus  String Patterns  Finding and specifying classes of strings using regular expressions  Lexical Analysis  Breaking strings down into important words  Grammars  Specifying and deconstructing valid sentences  Parsing  Turning sentences into trees  Interpreting  Simulating programs  Building a Web Browser  Interpreting HTML and JavaScript  Wrap-up  Exam testing your knowledge  Start Free Course  Start free course Free  What you get Instructor videos Learn by doing exercises Instructors & Partners   \u25be Westley Weimer INSTRUCTOR Westley Weimer is a Professor of Computer Science at the University of Virginia where he teaches computer science and leads research in programming languages and software engineering. He has won three awards for teaching and over half a dozen \"best paper\" awards for research. He has MS and PhD degrees from the University of California at Berkeley.   View more courses in Software Engineering  Frequently Asked Questions  When does the course begin?  This class is self paced. You can begin whenever you like and then follow your own pace. It\u2019s a good idea to set goals for yourself to make sure you stick with the course.  How long will the course be available?  This class will always be available!  How do I know if this course is for me?  Take a look at the \u201cClass Summary,\u201d \u201cWhat Should I Know,\u201d and \u201cWhat Will I Learn\u201d sections above. If you want to know more, just enroll in the course and start exploring.  Can I skip individual videos? What about entire lessons?  Yes! The point is for you to learn what YOU need (or want) to learn. If you already know something, feel free to skip ahead. If you ever find that you\u2019re confused, you can always go back and watch something that you skipped.  How much does this cost?  It\u2019s completely free! If you\u2019re feeling generous, we would love to have you contribute your thoughts, questions, and answers to the course discussion forum.  What are the rules on collaboration?  Collaboration is a great way to learn. You should do it! The key is to use collaboration as a way to enhance learning, not as a way of sharing answers without understanding them.  Why are there so many questions?  Udacity classes are a little different from traditional courses. We intersperse our video segments with interactive questions. There are many reasons for including these questions: to get you thinking, to check your understanding, for fun, etc... But really, they are there to help you learn. They are NOT there to evaluate your intelligence, so try not to let them stress you out.  What should I do while I\u2019m watching the videos?  Learn actively! You will retain more of what you learn if you take notes, draw diagrams, make notecards, and actively try to make sense of the material.  INFORMATION  Nanodegree Credentials  Georgia Tech Program  Udacity for Organizations  Help and FAQ  Feedback Program  COMMUNITY  Blog  News & Media  Developer API  UDACITY  About  Jobs  Contact Us  Legal  FOLLOW US ON      MOBILE APPS     Nanodegree is a trademark of Udacity \u00a9 2011-2015 Udacity, Inc."
  },
  {
    "courseID": 7,
    "title": "Design of Computer Programs: Programming Principles - Udacity",
    "url": "https://www.udacity.com/course/cs212",
    "description": "Sign In Sign Up Catalog Nanodegree Design of Computer Programs Programming Principles    Advanced Approx. 2 months  Assumes 6hr/wk (work at your own pace)  Join 20,644 Students Course Summary  Understanding how to approach programming problems and devise a solution is an essential skill for any Python developer. In this course, you\u2019ll learn new concepts, patterns, and methods that will expand your coding abilities from programming expert, Peter Norvig.  Why Take This Course?  Move along the path towards becoming an expert programmer! In this class you will practice going from a problem description to a solution, using a series of assignments. During office hours segments, Peter will also share his own personal tips and tricks for approaching programming problems - and his techniques may surprise you!  Prerequisites and Requirements  This course is intended for experienced Python programmers; students should be familiar with the Python syntax, as well as familiar with the following programming concepts: data structures, basic algorithms, and lambda functions.  This course is intended to challenge you. Be ready to struggle (and learn)!  See the Technology Requirements for using Udacity.  What Will I Learn?  Syllabus  Lesson 1: Winning Poker Hands  Steps of the design process; Developing for clarity and generality; Arguments for program correctness; Experimentation and simulation.; Design tradeoffs; Simplicity and Clarity. Decomposition and composability.  Lesson 2: Back of the Envelope  Back of envelope calculations; When to use brute force and when to be clever; The Zebra puzzle; Generator expressions; Permutations and combinations. Cryptarithmetic; Recursive and wishful thinking; Longest palindrome substring algorithm.  Lesson 3: Regular Expressions, other languages and interpreters  Defining the language of regular expressions; Interpreting the language; Defining the set of strings matched by a regular expression;  Other languages.  Lesson 4: Dealing with complexity through search  Search: finding your way with a flashlight or boat; pouring water. Analyzing the efficiency of an algorithm; Recurrence relations; Matching data types with algorithms.  Lesson 5: Dealing with uncertainty through probability  Probability: the game of Pig; Maximizing expected utility to optimize strategy.  Lesson 6: Word Games  Managing complexity; Large sets of words; Appropriate data structures; Word games.  Lesson 7: Conclusion  Interviews and Practice Exam  Start Free Course  Start free course Free  What you get Instructor videos Learn by doing exercises Instructors & Partners   \u25be Peter Norvig INSTRUCTOR Peter Norvig is Director of Research at Google Inc. He is also a Fellow of the American Association for Artificial Intelligence and the Association for Computing Machinery. Norvig is co-author of the popular textbook Artificial Intelligence: A Modern Approach. Prior to joining Google he was the head of the Computation Sciences Division at NASA Ames Research Center.   View more courses in Software Engineering  Frequently Asked Questions  When does the course begin?  This class is self paced. You can begin whenever you like and then follow your own pace. It\u2019s a good idea to set goals for yourself to make sure you stick with the course.  How long will the course be available?  This class will always be available!  How do I know if this course is for me?  Take a look at the \u201cClass Summary,\u201d \u201cWhat Should I Know,\u201d and \u201cWhat Will I Learn\u201d sections above. If you want to know more, just enroll in the course and start exploring.  Can I skip individual videos? What about entire lessons?  Yes! The point is for you to learn what YOU need (or want) to learn. If you already know something, feel free to skip ahead. If you ever find that you\u2019re confused, you can always go back and watch something that you skipped.  How much does this cost?  It\u2019s completely free! If you\u2019re feeling generous, we would love to have you contribute your thoughts, questions, and answers to the course discussion forum.  What are the rules on collaboration?  Collaboration is a great way to learn. You should do it! The key is to use collaboration as a way to enhance learning, not as a way of sharing answers without understanding them.  Why are there so many questions?  Udacity classes are a little different from traditional courses. We intersperse our video segments with interactive questions. There are many reasons for including these questions: to get you thinking, to check your understanding, for fun, etc... But really, they are there to help you learn. They are NOT there to evaluate your intelligence, so try not to let them stress you out.  What should I do while I\u2019m watching the videos?  Learn actively! You will retain more of what you learn if you take notes, draw diagrams, make notecards, and actively try to make sense of the material.  INFORMATION  Nanodegree Credentials  Georgia Tech Program  Udacity for Organizations  Help and FAQ  Feedback Program  COMMUNITY  Blog  News & Media  Developer API  UDACITY  About  Jobs  Contact Us  Legal  FOLLOW US ON      MOBILE APPS     Nanodegree is a trademark of Udacity \u00a9 2011-2015 Udacity, Inc."
  },
  {
    "courseID": 8,
    "title": "Artificial Intelligence for Robotics Course - Udacity",
    "url": "https://www.udacity.com/course/cs373",
    "description": "Sign In Sign Up Catalog Nanodegree Artificial Intelligence for Robotics Programming a Robotic Car    Advanced Approx. 2 months  Assumes 6hr/wk (work at your own pace)  Built by   Join 15,699 Students  VIEW TRAILER Course Summary  Learn how to program all the major systems of a robotic car from the leader of Google and Stanford's autonomous driving teams. This class will teach you basic methods in Artificial Intelligence, including: probabilistic inference, planning and search, localization, tracking and control, all with a focus on robotics. Extensive programming examples and assignments will apply these methods in the context of building self-driving cars.  This course is offered as part of the Georgia Tech Masters in Computer Science. The updated course includes a final project, where you must chase a runaway robot that is trying to escape!  Why Take This Course?  This course will teach you probabilistic inference, planning and search, localization, tracking and control, all with a focus on robotics.  At the end of the course, you will leverage what you learned by solving the problem of a runaway robot that you must chase and hunt down!  Prerequisites and Requirements  Success in this course requires some programming experience and some mathematical fluency.  Programming in this course is done in Python. We will use some basic object-oriented concepts to model robot motion and perception. If you don\u2019t know Python but have experience with another language, you should be able to pick up the syntax fairly quickly. If you have no programming experience, you should consider taking Udacity\u2019s Introduction to Computer Science course before attempting this one.  The math used will be centered on probability and linear algebra. You don\u2019t need to be an expert in either, but some familiarity with concepts in probability (e.g. probabilities must add to one, conditional probability, and Bayes\u2019 rule) will be extremely helpful. It is possible to learn these concepts during the course, but it will take more work. Knowledge of linear algebra, while helpful, is not required.  See the Technology Requirements for using Udacity.  What Will I Learn?  Syllabus  Lesson 1: Localization  Localization Total Probability Uniform Distribution Probability After Sense Normalize Distribution Phit and Pmiss Sum of Probabilities Sense Function Exact Motion Move Function Bayes Rule Theorem of Total Probability Lesson 2: Kalman Filters  Gaussian Intro Variance Comparison Maximize Gaussian Measurement and Motion Parameter Update New Mean Variance Gaussian Motion Kalman Filter Code Kalman Prediction Kalman Filter Design Kalman Matrices Lesson 3: Particle Filters  Slate Space Belief Modality Particle Filters Using Robot Class Robot World Robot Particles Lesson 4: Search  Motion Planning Compute Cost Optimal Path First Search Program Expansion Grid Dynamic Programming Computing Value Optimal Policy Lesson 5: PID Control  Robot Motion Smoothing Algorithm Path Smoothing Zero Data Weight Pid Control Proportional Control Implement P Controller Oscillations Pd Controller Systematic Bias Pid Implementation Parameter Optimization Lesson 6: SLAM (Simultaneous Localization and Mapping)  Localization Planning Segmented Ste Fun with Parameters SLAM Graph SLAM Implementing Constraints Adding Landmarks Matrix Modification Untouched Fields Landmark Position Confident Measurements Implementing SLAM Runaway Robot Final Project  Start Free Course  Start free course Free  What you get Instructor videos Learn by doing exercises Instructors & Partners   \u25be Sebastian Thrun INSTRUCTOR Sebastian Thrun is a Research Professor of Computer Science at Stanford University, a Google Fellow, a member of the National Academy of Engineering and the German Academy of Sciences. Thrun is best known for his research in robotics and machine learning, specifically his work with self-driving cars.   View more courses in Software Engineering   View more courses in Georgia Tech Masters in CS  INFORMATION  Nanodegree Credentials  Georgia Tech Program  Udacity for Organizations  Help and FAQ  Feedback Program  COMMUNITY  Blog  News & Media  Developer API  UDACITY  About  Jobs  Contact Us  Legal  FOLLOW US ON      MOBILE APPS     Nanodegree is a trademark of Udacity \u00a9 2011-2015 Udacity, Inc."
  },
  {
    "courseID": 9,
    "title": "Applied Cryptography and Encryption Class Online - Udacity",
    "url": "https://www.udacity.com/course/cs387",
    "description": "Sign In Sign Up Catalog Nanodegree Applied Cryptography Science of Secrets    Advanced Approx. 2 months  Assumes 6hr/wk (work at your own pace)  Join 14,776 Students  VIEW TRAILER Course Summary  Cryptography is present in everyday life, from paying with a credit card to using the telephone. Learn all about making and breaking puzzles in computing.  Why Take This Course?  Explore how secrets are written and shared, as well as what can go wrong when cryptography is misused or implemented badly.  Prerequisites and Requirements  This course assumes previous programming experience, comparable to what is covered by the Udacity CS101 course, as well as some understanding of probability and theory of computation and algorithm analysis.  See the Technology Requirements for using Udacity.  What Will I Learn?  Syllabus  Lesson 1: Perfect Ciphers  What makes certain ciphers perfect, how the Lorenz Cipher was broken  Lesson 2: Symmetric Encryption  Sending messages when two people share a secret  Lesson 3: Key Exchange  Techniques to establish a shared secret  Lesson 4: Asymmetric Encryption  Exchanging information using public key cryptosystems  Lesson 5: Public Key Protocols  Encrypted key exchange, certificates, secure commerce  Lesson 6: Using Cryptographic Primitives  How cryptography can be useful for anonymizing communication, voting, and digital cash  Lesson 7: Secure Computation  Computing without exposing data  Start Free Course  Start free course Free  What you get Instructor videos Learn by doing exercises Instructors & Partners   \u25be Dave Evans INSTRUCTOR David Evans is a Professor of Computer Science at the University of Virginia where he teaches computer science and leads research in computer security. He is the author of an introductory computer science textbook and has won Virginia's highest award for university faculty. He has PhD, SM, and SB degrees from MIT.   View more courses in Software Engineering  Frequently Asked Questions  When does the course begin?  This class is self paced. You can begin whenever you like and then follow your own pace. It\u2019s a good idea to set goals for yourself to make sure you stick with the course.  How long will the course be available?  This class will always be available!  How do I know if this course is for me?  Take a look at the \u201cClass Summary,\u201d \u201cWhat Should I Know,\u201d and \u201cWhat Will I Learn\u201d sections above. If you want to know more, just enroll in the course and start exploring.  Can I skip individual videos? What about entire lessons?  Yes! The point is for you to learn what YOU need (or want) to learn. If you already know something, feel free to skip ahead. If you ever find that you\u2019re confused, you can always go back and watch something that you skipped.  How much does this cost?  It\u2019s completely free! If you\u2019re feeling generous, we would love to have you contribute your thoughts, questions, and answers to the course discussion forum.  What are the rules on collaboration?  Collaboration is a great way to learn. You should do it! The key is to use collaboration as a way to enhance learning, not as a way of sharing answers without understanding them.  Why are there so many questions?  Udacity classes are a little different from traditional courses. We intersperse our video segments with interactive questions. There are many reasons for including these questions: to get you thinking, to check your understanding, for fun, etc... But really, they are there to help you learn. They are NOT there to evaluate your intelligence, so try not to let them stress you out.  What should I do while I\u2019m watching the videos?  Learn actively! You will retain more of what you learn if you take notes, draw diagrams, make notecards, and actively try to make sense of the material.  INFORMATION  Nanodegree Credentials  Georgia Tech Program  Udacity for Organizations  Help and FAQ  Feedback Program  COMMUNITY  Blog  News & Media  Developer API  UDACITY  About  Jobs  Contact Us  Legal  FOLLOW US ON      MOBILE APPS     Nanodegree is a trademark of Udacity \u00a9 2011-2015 Udacity, Inc."
  },
  {
    "courseID": 10,
    "title": "Machine Learning - Stanford University | Coursera",
    "url": "https://www.coursera.org/course/ml",
    "description": "Coursera Courses Specializations Institutions About Log In Sign Up Watch Intro Video  Machine Learning Learn about the most effective machine learning techniques, and gain practice implementing them and getting them to work for yourself.  Preview Lectures Sessions Add to Watchlist Course at a Glance 5-7 hours/week English \u4e2d\u6587, \u65e5\u672c\u8a9e, Portugu\u00eas & Espa\u00f1ol subtitles Instructors  Andrew Ng Stanford University Categories Statistics and Data Analysis Computer Science: Artificial Intelligence Share Tweet About the Course Machine Learning is now available in Coursera\u2019s on demand format! To watch videos and complete assignments at your own pace, join the on demand course now at: https://www.coursera.org/learn/machine-learning/\u00a0  Machine learning is the science of getting computers to act without being explicitly programmed. In the past decade, machine learning has given us self-driving cars, practical speech recognition, effective web search, and a vastly improved understanding of the human genome. Machine learning is so pervasive today that you probably use it dozens of times a day without knowing it. Many researchers also think it is the best way to make progress towards human-level AI. In this class, you will learn about the most effective machine learning techniques, and gain practice implementing them and getting them to work for yourself. More importantly, you'll learn about not only the theoretical underpinnings of learning, but also gain the practical know-how needed to quickly and powerfully apply these techniques to new problems. Finally, you'll learn about some of Silicon Valley's best practices in innovation as it pertains to machine learning and AI.  This course provides a broad introduction to machine learning, datamining, and statistical pattern recognition. Topics include: (i) Supervised learning (parametric/non-parametric algorithms, support vector machines, kernels, neural networks). (ii) Unsupervised learning (clustering, dimensionality reduction, recommender systems, deep learning). (iii) Best practices in machine learning (bias/variance theory; innovation process in machine learning and AI). The course will also draw from numerous case studies and applications, so that you'll also learn how to apply learning algorithms to building smart robots (perception, control), text understanding (web search, anti-spam), computer vision, medical informatics, audio, database mining, and other areas.  FAQ What is the format of the class? The class will consist of lecture videos, which are broken into small chunks, usually between eight and twelve minutes each. Some of these may contain integrated quiz questions. There will also be standalone quizzes that are not part of video lectures, and programming assignments. This course is available in a self paced format here:\u00a0https://www.coursera.org/learn/machine-learning  How much programming background is needed for the course? The course includes programming assignments and some programming background will be helpful.  Do I need to buy a textbook for the course? No, it is self-contained.  Will I get a statement of accomplishment after completing this class? Yes, participants who successfully complete the session-based class will receive a Statement of Accomplishment signed by the instructor. \u00a0Statements of Accomplishment are not available for the on demand version of this course.  Related Courses Loading recommended courses...  Browse more courses Coursera  Coursera provides universal access to the world\u2019s best education, partnering with top universities and organizations to offer courses for anyone to take, for free.  \u00a9 2015 Coursera Inc. All rights reserved.  COMPANY  About People Leadership Careers FRIENDS  Partners Community Programs Developers Translate CONNECT  Google+ Twitter Facebook Blog Tech Blog MORE  Terms Privacy Help Press Contact"
  },
  {
    "courseID": 11,
    "title": "Coursera - Free Online Courses From Top Universities",
    "url": "https://www.coursera.org/course/hci",
    "description": "Coursera Courses Specializations Institutions About Log In Sign Up ooops... HTTP 404  Looks like you found a page that does not exist or the URL was mistyped by accident.  If you feel this was an error, please visit our help site to contact us.  Coursera  Coursera provides universal access to the world\u2019s best education, partnering with top universities and organizations to offer courses for anyone to take, for free.  \u00a9 2015 Coursera Inc. All rights reserved.  COMPANY  About People Leadership Careers FRIENDS  Partners Community Programs Developers Translate CONNECT  Google+ Twitter Facebook Blog Tech Blog MORE  Terms Privacy Help Press Contact"
  },
  {
    "courseID": 12,
    "title": "Natural Language Processing - Stanford University | Coursera",
    "url": "https://www.coursera.org/course/nlp",
    "description": "Coursera Courses Specializations Institutions About Log In Sign Up Watch Intro Video  Natural Language Processing In this class, you will learn fundamental algorithms and mathematical models for processing natural language, and how these can be used to solve practical problems.  Preview Lectures Sessions Add to Watchlist Course at a Glance 8-10 hours/week English Instructors  Dan Jurafsky Stanford University  Christopher Manning Stanford University Categories Computer Science: Artificial Intelligence Share Tweet About the Course This course covers a broad range of topics in natural language processing, including word and sentence tokenization, text classification and sentiment analysis, spelling correction, information extraction, parsing, meaning extraction, and question answering, We will also introduce the underlying theory from probability, statistics, and machine learning that are crucial for the field, and cover fundamental algorithms like n-gram language modeling, naive bayes and maxent classifiers, sequence models like Hidden Markov Models, probabilistic dependency and constituent parsing, and vector-space models of meaning.  We are offering this course on Natural Language Processing free and online to students worldwide, continuing Stanford's exciting forays into large scale online instruction. Students have access to screencast lecture videos, are given quiz questions, assignments and exams, receive regular feedback on progress, and can participate in a discussion forum. Those who successfully complete the course will receive a statement of accomplishment. Taught by Professors Jurafsky and Manning, the curriculum draws from Stanford's courses in Natural Language Processing. You will need a decent internet connection for accessing course materials, but should be able to watch the videos on your smartphone.\u00a0  \u00a0  Course Syllabus The following topics will be covered in the first two weeks:  Introduction and Overview: Basic Text Processing:\u00a0J+M Chapters 2.1, 3.9; MR+S Chapters 2.1-2.2 Minimum Edit Distance:\u00a0J+M Chapter 3.11 Language Modeling:\u00a0J+M Chapter 4 Spelling Correction:\u00a0J+M Chapters 5.9,\u00a0Peter Norvig (2007) How to Write a Spelling Corrector Recommended Background No background in natural language processing is required. Students will be expected to know a bit of basic probability (know Bayes rule), a bit about vectors and vector spaces (could length normalize a vector), a bit of calculus (know that the derivative of a function is zero at a maximum or minimum of a function), but we will review these concepts as we first use them. You should have reasonable programming ability (know about hash tables and graph data structures), be able to write programs in Java or Python, and have a computer (Windows, Mac or Linux) with internet access.  Suggested Readings We will provide detailed lecture notes of all the technical content, which will be yours to keep after the end of class. Many students do fine just working from the lectures and notes. But others find it very useful to have an accompanying textbook, for reinforcing the core material, as a source of additional exercises, and as a reference for the future.  To prepare for the class in advance, you may consider reading through some sections of the textbooks (Jurafsky and Martin, Speech and Language Processing 2nd Edition, and\u00a0Manning, Sch\u00fctze and Raghavan 2008). Or, if you're rusty or not very experienced in either Java or Python, it'd be great to work through early parts of\u00a0Bird, Klein and Loper 2009 FAQ Will I get a statement of accomplishment after completing this class? Yes. Students who successfully complete the class will receive a statement of accomplishment signed by the instructor.  What is the format of the class? The class will consist of lecture videos, which are broken into small chunks, usually between 8 and 12 minutes each. Some of these may contain integrated quiz questions. There will also be standalone quizzes that are not part of video lectures, and programming assignments.  How much work will I be expected to do in this class? You need to work about 10 hours a week to complete the course.  About 2 hours of video segments each week, containing inline ungraded quiz questions. A weekly, graded multiple choice and short answer problem set (about 1 hour to complete). A substantial weekly programming assignment (about 6 hours to complete). Why Study Natural Language Processing?  Natural language processing is the technology for dealing with our most ubiquitous product: human language, as it appears in emails, web pages, tweets, product descriptions, newspaper stories, social media, and scientific articles, in thousands of languages and varieties. In the past decade, successful natural language processing applications have become part of our everyday experience, from spelling and grammar correction in word processors to machine translation on the web, from email spam detection to automatic question answering, from detecting people's opinions about products or services to extracting appointments from your email. In this class, you'll learn the fundamental algorithms and mathematical models for human language processing and how you can use them to solve practical problems in dealing with language data wherever you encounter it. Related Courses Loading recommended courses...  Browse more courses Coursera  Coursera provides universal access to the world\u2019s best education, partnering with top universities and organizations to offer courses for anyone to take, for free.  \u00a9 2015 Coursera Inc. All rights reserved.  COMPANY  About People Leadership Careers FRIENDS  Partners Community Programs Developers Translate CONNECT  Google+ Twitter Facebook Blog Tech Blog MORE  Terms Privacy Help Press Contact"
  },
  {
    "courseID": 13,
    "title": "Algorithms: Design and Analysis, Part 1 - Stanford University | Coursera",
    "url": "https://www.coursera.org/course/algo",
    "description": "Coursera Courses Specializations Institutions About Log In Sign Up Watch Intro Video  Algorithms: Design and Analysis, Part 1 In this course you will learn several fundamental principles of algorithm design: divide-and-conquer methods, graph algorithms, practical data structures (heaps, hash tables, search trees), randomized algorithms, and more.  Preview Lectures Sessions Join for Free! Eligible for Statement of Accomplishment Course at a Glance 6 weeks of study 5-7 hours/week English Instructors  Tim Roughgarden Stanford University Categories Computer Science: Theory Share   About the Course In this course you will learn several fundamental principles of algorithm design. You'll learn the divide-and-conquer design paradigm, with applications to fast sorting, searching, and multiplication. You'll learn several blazingly fast primitives for computing on graphs, such as how to compute connectivity information and shortest paths. Finally, we'll study how allowing the computer to \"flip coins\" can lead to elegant and practical algorithms and data structures. Learn the answers to questions such as: How do data structures like heaps, hash tables, bloom filters, and balanced search trees actually work, anyway? How come QuickSort runs so fast? What can graph algorithms tell us about the structure of the Web and social networks? Did my 3rd-grade teacher explain only a suboptimal algorithm for multiplying two numbers?  Course Syllabus Week 1: Introduction.\u00a0 Asymptotic analysis including big-oh notation.\u00a0 Divide-and-conquer algorithms for sorting, counting inversions, matrix multiplication, and closest pair.  Week 2: Running time analysis of divide-and-conquer algorithms.\u00a0 The master method.\u00a0 Introduction to randomized algorithms, with a probability review.\u00a0 QuickSort.\u00a0   Week 3: More on randomized algorithms and probability.\u00a0 Computing the median in linear time.\u00a0 A randomized algorithm for the minimum graph cut problem.  Week 4: Graph primitives.\u00a0 Depth- and breadth-first search.\u00a0 Connected components in undirected graphs.\u00a0 Topological sort in directed acyclic graphs.\u00a0 Strongly connected components in directed graphs.  Week 5: Dijkstra's shortest-path algorithm.\u00a0 Introduction to data structures.\u00a0 Heaps and applications.  Week 6: Further data structures.\u00a0 Hash tables and applications.\u00a0 Balanced binary search trees.  Recommended Background How to program in at least one programming language (like C, Java, or Python); and familiarity with proofs, including proofs by induction and by contradiction. \u00a0At Stanford, a version of this course is taken by sophomore, junior, and senior-level computer science majors.\u00a0   Suggested Readings No specific textbook is required for the course.\u00a0 Much of the course material is covered by the well-known textbooks on algorithms, and the student is encouraged to consult their favorite for additional information.  Course Format The class will consist of lecture videos, generally between 10 and 15 minutes in length. These usually integrated quiz questions. There will also be standalone homeworks and programming assignments that are not part of video lectures, and a final exam.   FAQ Will I get a statement of accomplishment after completing this class? Yes. Students who successfully complete the class will receive a statement of accomplishment signed by the instructor.  What is the format of the class? The class consists of lecture videos, which are broken into small chunks, usually between eight and twelve minutes each. Some of these may contain integrated quiz questions. There will also be standalone quizzes that are not part of video lectures. There will be approximately two hours worth of video content per week.  What should I know to take this class? How to program in at least one programming language (like C, Java, or Python); familiarity with proofs, including proofs by induction and by contradiction; and some discrete probability, like how to compute the probability that a poker hand is a full house. At Stanford, a version of this course is taken by sophomore, junior, and senior-level computer science majors. Related Courses Loading recommended courses...  Browse more courses Coursera  Coursera provides universal access to the world\u2019s best education, partnering with top universities and organizations to offer courses for anyone to take, for free.  \u00a9 2015 Coursera Inc. All rights reserved.  COMPANY  About People Leadership Careers FRIENDS  Partners Community Programs Developers Translate CONNECT  Google+ Twitter Facebook Blog Tech Blog MORE  Terms Privacy Help Press Contact"
  },
  {
    "courseID": 14,
    "title": "Cryptography I - Stanford University | Coursera",
    "url": "https://www.coursera.org/course/crypto",
    "description": "Coursera Courses Specializations Institutions About Log In Sign Up Watch Intro Video  Cryptography I Learn about the inner workings of cryptographic primitives and how to apply this knowledge in real-world applications!  Preview Lectures Sessions Join for Free! Eligible for Statement of Accomplishment Course at a Glance 6 weeks of study 5-7 hours/week English Instructors  Dan Boneh Stanford University Categories Computer Science: Theory Computer Science: Systems & Security Share Tweet About the Course Cryptography is an indispensable tool for protecting information in computer systems. This course explains the inner workings of cryptographic primitives and how to correctly use them. Students will learn how to reason about the security of cryptographic constructions and how to apply this knowledge to real-world applications. The course begins with a detailed discussion of how two parties who have a shared secret key can communicate securely when a powerful adversary eavesdrops and tampers with traffic. We will examine many deployed protocols and analyze mistakes in existing systems. The second half of the course discusses public-key techniques that let two or more parties generate a shared secret key. We will cover the relevant number theory and discuss public-key encryption and basic key-exchange.\u00a0Throughout the course students will be exposed to many exciting open problems in the field.  The course will include written homeworks and programming labs. The course is self-contained, however it will be helpful to have a basic understanding of discrete probability theory.  A preview of the course, including lectures and homework assignments, is available at this preview site.  FAQ Will I get a statement of accomplishment after completing this class? Yes. Students who successfully complete the class will receive a statement of accomplishment signed by the instructor.  What is the format of the class? The class will consist of lecture videos, which are broken into small chunks, usually between eight and twelve minutes each. Some of these may contain integrated quiz questions. There will also be standalone quizzes that are not part of video lectures, and programming assignments. There will be approximately two hours worth of video content per week.  How much programming background is needed for the course? The course includes programming assignments and some programming background will be helpful. However, we will hand out lots of starter code that will help students complete the assignments. We will also point to online resources that can help students find the necessary background.  What math background is needed for the course? The course is mostly self contained, however some knowledge of discrete probability will be helpful. The\u00a0wikibooks article\u00a0on discrete probability should give sufficient background.  Can I see a preview of the lectures and homework? Yes, check out this preview site.  Related Courses Loading recommended courses...  Browse more courses Coursera  Coursera provides universal access to the world\u2019s best education, partnering with top universities and organizations to offer courses for anyone to take, for free.  \u00a9 2015 Coursera Inc. All rights reserved.  COMPANY  About People Leadership Careers FRIENDS  Partners Community Programs Developers Translate CONNECT  Google+ Twitter Facebook Blog Tech Blog MORE  Terms Privacy Help Press Contact"
  },
  {
    "courseID": 15,
    "title": "Model Thinking - University of Michigan | Coursera",
    "url": "https://www.coursera.org/course/modelthinking",
    "description": "Coursera Courses Specializations Institutions About Log In Sign Up Watch Intro Video  Model Thinking In this class, you will learn how to think with models and use them to make sense of the complex world around us.  Preview Lectures Sessions Join for Free! Eligible for Verified Certificate Statement of Accomplishment Course at a Glance 10 weeks of study 4-8 hours/week English Portugu\u00eas subtitles Earn official recognition for your work   Verified Certificate Instructors  Scott E. Page University of Michigan Categories Economics & Finance Humanities Share Tweet About the Course We live in a complex world with diverse people, firms, and governments whose behaviors aggregate to produce novel, unexpected phenomena. We see political uprisings, market crashes, and a never ending array of social trends. How do we make sense of it? Models. Evidence shows that people who think with models consistently outperform those who don't. And, moreover people who think with lots of models outperform people who use only one. Why do models make us better thinkers? Models help us to better organize information - to make sense of that fire hose or hairball of data (choose your metaphor) available on the Internet. Models improve our abilities to make accurate forecasts. They help us make better decisions and adopt more effective strategies. They even can improve our ability to design institutions and procedures. In this class, I present a starter kit of models: I start with models of tipping points. I move on to cover models explain the wisdom of crowds, models that show why some countries are rich and some are poor, and models that help unpack the strategic decisions of firm and politicians. The models covered in this class provide a foundation for future social science classes, whether they be in economics, political science, business, or sociology. Mastering this material will give you a huge leg up in advanced courses. They also help you in life. Here's how the course will work. For each model, I present a short, easily digestible overview lecture. Then, I'll dig deeper. I'll go into the technical details of the model. Those technical lectures won't require calculus but be prepared for some algebra. For all the lectures, I'll offer some questions and we'll have quizzes and even a final exam. If you decide to do the deep dive, and take all the quizzes and the exam, you'll receive a certificate of completion. If you just decide to follow along for the introductory lectures to gain some exposure that's fine too. It's all free. And it's all here to help make you a better thinker!  Subtitles for\u00a0all video lectures available in: English, Chinese (provided by\u00a0Yeeyan),\u00a0Ukrainian (Pinchuk Foundation), and Turkish (provided by Turkcell Akademi).  This course is also available in Chinese. Click\u00a0here\u00a0to visit the translated version of Model Thinking.  Course Syllabus This course will consist of twenty sections. As the course proceeds, I will fill in the descriptions of the topics and put in readings.  Section 1: Introduction: Why Model? In these lectures, I describe some of the reasons why a person would want to take a modeling course. These reasons fall into four broad categories:  To be an intelligent citizen of the world To be a clearer thinker To understand and use data To better decide, strategize, and design There are two readings for this section. These should be read either after the first video or at the completion of all of the videos.  The Model Thinker: Prologue, Introduction and Chapter 1  Why Model? by Joshua Epstein  Section 2: Sorting and Peer Effects We now jump directly into some models. We contrast two types of models that explain a single phenomenon, namely that people tend to live and interact with people who look, think, and act like themselves. After an introductory lecture, we cover famous models by Schelling and Granovetter that cover these phenomena. We follows those with a fun model about standing ovations that I wrote with my friend John Miller.  In this second section, I show a computational version of Schelling's Segregation Model using NetLogo. Netlogo is free software authored by Uri Wilensky or Northwestern University. I will be using NetLogo several times during the course. It can be downloaded here:  NetLogo  The Schelling Model that I use can be found by clicking on the \"File\" tab, then going to \"Models Library\". In the Models Library directory, click on the arrow next to the Social Science folder and then scroll down and click on the model called Segregation.  The readings for this section include some brief notes on Schelling's model and then the academic papers of Granovetter and Miller and Page. I'm not expecting you to read those papers from start to end, but I strongly encourage you to peruse them so that you can see how social scientists frame and interpret models.  Notes on Schelling  Granovetter Model  Miller and Page Model  Section 3: Aggregation In this section, we explore the mysteries of aggregation, i.e. adding things up. We start by considering how numbers aggregate, focusing on the Central Limit Theorem. We then turn to adding up rules. We consider the Game of Life and one dimensional cellular automata models. Both models show how simple rules can combine to produce interesting phenomena. Last, we consider aggregating preferences. Here we see how individual preferences can be rational, but the aggregates need not be.  There exist many great places on the web to read more about the Central Limit Theorem, the Binomial Distribution, Six Sigma, The Game of LIfe, and so on. I've included some links to get you started. The readings for cellular automata and for diverse preferences are short excerpts from my books\u00a0Complex Adaptive Social Systems\u00a0and\u00a0The Difference\u00a0Respectively.  Central Limit Theorem  Binomial Distribution  Six Sigma  Cellular Automata1  Cellular Automata2  Diverse Preferences  Section 4: Decision Models In this section, we study some models of how people make decisions. We start by considering multi criterion decision making. We then turn to spatial models of decision making and then decision trees. We conclude by looking at the value of information..  The reading for multi-criterion decision making will be my guide for the Michigan Civil Rights Initiative. It provides a case study for how to use this technique. For spatial voting and decision models, there exist many great power point presentations and papers on the web. The Decision Tree writings are from Arizona State University's Craig Kirkwood.  Multi Criterion Decision Making Case Study  Spatial Models  Decision Theory  Section 5: Models of People: Thinking Electrons In this section, we study various ways that social scientists model people. We study and contrast three different models. The\u00a0rational actor\u00a0approach,behavioral models\u00a0, and\u00a0rule based models\u00a0. These lectures provide context for many of the models that follow. There's no specific reading for these lectures though I mention several books on behavioral economics that you may want to consider. Also, if you find the race to the bottom game interesting just type \"Rosemary Nagel Race to the Bottom\" into a search engine and you'll get several good links. You can also find good introductions to \"Zero Intelligence Traders\" by typing that in as well.  Here is a link to a brief primer on behavioral economics that has more references.  Short Primer on Behavioral Economics  Section 6: Linear Models In this section, we cover linear models. We start by looking at categorical models, in which data gets binned into categories. We use this simple framework to introduce measures like mean, variance, and R-squared. We then turn to linear models describing what linear models do, how to read regression output (a valuable skill!) and how to fit nonlinear data with linear models. These lectures are meant to give you a \"feel\" for how linear models are used and perhaps to motivate you to take a course on these topics. I conclude this section by highlighting a distinction between what I call Big Coefficient thinking and New Reality thinking. The readings for this section consist of two short pieces written by me, but you can find abundant resources on the web on linear models, R-squared, regression, and evidence based thinking.  Categorical Models  Linear Models  Section 7: Tipping Points In this section, we cover tipping points. We focus on two models. A percolation model from physics that we apply to banks and a model of the spread of diseases. The disease model is more complicated so I break that into two parts. The first part focuses on the diffusion. The second part adds recovery. The readings for this section consist of two excerpts from the book I'm writing on models. One covers diffusion. The other covers tips. There is also a technical paper on tipping points that I've included in a link. I wrote it with PJ Lamberson and it will be published in the\u00a0Quarterly Journal of Political Science. I've included this to provide you a glimpse of what technical social science papers look like. You don't need to read it in full, but I strongly recommend the introduction. It also contains a wonderful reference list.  Tipping Points  DIffusion and SIS  Lamberson and Page: Tipping Points (READ INTRO ONLY)  Section 8: Economic Growth In this section, we cover several models of growth. We start with a simple model of exponential growth and then move on to models from economics, with a focus on Solow's basic growth model. I simplify the model by leaving out the labor component. These models help us distinguish between two types of growth: growth that occurs from capital accumulation and growth that occurs from innovation.  Growth Models  Section 9: Diversity and Innovation In this section, we cover some models of problem solving to show the role that diversity plays in innovation. We see how diverse perspectives (problem representations) and heuristics enable groups of problem solvers to outperform individuals. We also introduce some new concepts like \"rugged landscapes\" and \"local optima\". In the last lecture, we'll see the awesome power of recombination and how it contributes to growth. The readings for this chapters consist on an excerpt from my book\u00a0The Difference\u00a0courtesy of Princeton University Press.  Diversity and Problem Solving  Section 10: Markov Processes In this section, we cover Markov Processes. Markov Processes capture dynamic processes between a fixed set of states. For example, we will consider a process in which countries transition between democratic and dictatorial. To be a Markov Process, it must be possible to get from any one state to any other and the probabilities of moving between states must remain fixed over time. If those assumptions hold, then the process will have a unique equilibrium. In other words, history will not matter. Formally, this result is called the Markov Convergence Theorem. In addition to covering Markov Processes, we will also see how the basic framework can be used in other applications such as determining authorship of a text and the efficacy of a drug protocol.  Markov Processes  Section 11: Lyapunov Functions Models can help us to determine the nature of outcomes produced by a system: will the system produce an equilibrium, a cycle, randomness, or complexity? In this set of lectures, we cover Lyapunov Functions. These are a technique that will enable us to identify many systems that go to equilibrium. In addition, they enable us to put bounds on how quickly the equilibrium will be attained. In this set of lectures, we learn the formal definition of Lyapunov Functions and see how to apply them in a variety of settings. We also see where they don't apply and even study a problem where no one knows whether or not the system goes to equilibrium or not.  Lyapunov Functions  Section 12: Coordination and Culture In this set of lectures, we consider some models of culture. We begin with some background on what culture is and why it's so important to social scientists. In the analytic section, we begin with a very simple game called the pure coordination game In this game, the players win only if they choose the same action. Which action they choose doesn't matter -- so long as they choose the same one. For example, whether you drive on the left or the right side of the road is not important, but what is important is that you drive on the same side as everyone else. We then consider situations in which people play multiple coordination games and study the emergence of culture. In our final model, we include a desire consistency as well as coordination in a model that produces the sorts of cultural signatures seen in real world data. The readings for this section include some of my notes on coordination games and then the Bednar et al academic paper. In that paper, you see how we used Markov Processes to study the model. There is also a link to the Axelrod Net Logo Model.  Coordination Games  Bednar et al. 2010  Axelrod Culture Model in Netlogo  Section 13: Path Dependence  In this set of lectures, we cover path dependence. We do so using some very simple urn models. The most famous of which is the Polya Process. These models are very simple but they enable us to unpack the logic of what makes a process path dependent. We also relate path dependence to increasing returns and to tipping points. The reading for this lecture is a paper that I wrote that is published in the\u00a0Quarterly Journal of Political Science  Path Dependence  Section 14: Networks  In this section, we cover networks. We discuss how networks form, their structure -- in particular some common measures of networks -- and their function. Often, networks exhibit functions that emerge, but that we mean that no one intended for the functionality but it arises owing to the structure of the network. The reading for this section is a short article by Steven Strogatz.  Strogatz  Section 15:Randomness and Random Walks  In this section, we first discuss randomness and its various sources. We then discuss how performance can depend on skill and luck, where luck is modeled as randomness. We then learn a basic random walk model, which we apply to the Efficient Market Hypothesis, the ideas that market prices contain all relevant information so that what's left is randomness. We conclude by discussing finite memory random walk model that can be used to model competition. The reading for this section is a paper on distinguishing skill from luck by Michael Mauboussin. Mauboussin: Skill vs Luck  Section 16: The Colonel Blotto Game  In this section, we cover the Colonel Blotto Game. This game was originally developed to study war on multiple fronts. It's now applied to everything from sports to law to terrorism. We will discuss the basics of Colonel Blotto, move on to some more advanced analysis and then contrast Blotto with our skill luck model from the previous section. The readings for this section are an excerpt from my book\u00a0The Difference\u00a0and a paper that I wrote with Russell Golman of Carnegie Mellon. You need only read the first four pages of the Golman paper.  Blotto from\u00a0The Difference  Golman Page: General Blotto  Section 17:The Prisoners' Dilemma and Collective Action  In this section, we cover the Prisoners' Dilemma, Collective Action Problems and Common Pool Resource Problems. We begin by discussion the Prisoners' Dilemma and showing how individual incentives can produce undesirable social outcomes. We then cover seven ways to produce cooperation. Five of these will be covered in the paper by Nowak and Sigmund listed below. We conclude by talking about collective action and common pool resource problems and how they require deep careful thinking to solve. There's a wonderful piece to read on this by the Nobel Prize winner Elinor Ostrom  The Prisoners' Dilemma in the\u00a0Stanford Encyclopedia of Philosophy  Nowak and Sigmund: Five Ways to Cooperate  Ostrom: Going Beyond Panaceas  Section 18: Mechanism Design: Auctions  In this section, we cover mechanism design. We begin with some of the basics: how to overcome problems of hidden action and hidden information. We then turn to the more applied question of how to design auctions. We conclude by discussion how one can use mechanisms to make decisions about public projects. The readings for this section consist of a piece by the Eric Maskin who won a Nobel Prize for his work on mechanism design and some slides on auctions by V.S. Subrahmanian. The Maskin article can be tough sledding near the end. Don't worry about necessarily understanding everything. Focus on the big picture that he describes.  Maskin: Mechanism Design  V.S. Subrahmanian's auction slides  Section 19: Learning: Replicator Dynamics  In this section, we cover replicator dynamics and Fisher's fundamental theorem. Replicator dynamics have been used to explain learning as well as evolution. Fisher's theorem demonstrates how the rate of adaptation increases with the amount of variation. We conclude by describing how to make sense of both Fisher's theorem and our results on six sigma and variation reduction. The readings for this section are very short. The second reading on Fisher's theorem is rather technical. Both are excerpts from\u00a0Diversity and Complexity  The Replicator Equation  Fisher's Theorem  Section 20: The Many Model Thinker: Diversity and Prediction  In our final section, we cover the value of ability and diversity to create wise crowds when making predictions. We start off by talking about category models and linear models and how they can be used to make predictions. We then cover the Diversity Prediction Theorem, which provides basic intuition for how collective prediction works. We conclude by talking about the value of having lots of models. The reading for this section is a short explanation of the diversity prediction theorem.  Diversity Prediction Theorem  Recommended Background Students should be very comfortable with basic algebra. \u00a0Calculus isn\u2019t necessary but a conceptual understanding of how derivatives give the slope at a point \u00a0proves useful.  Suggested Readings The Difference: How the Power of Diversity Creates Better Groups, Firms, Schools, and Societies (New Edition), Scott E Page. \u00a0 Complex Adaptive Systems: An Introduction to Computational Models of Social Life (Princeton Studies in Complexity), John Miller and Scott Page  An Introduction to Models in the Social Sciences, Jean Lave and James March  Course Format The class will cover a variety of models. For each model, I will give an introductory lecture accessible to a general audience that last approximately ten minutes. I will follow this with advanced lectures that explain how model's details and how to use it, as well as possible extensions. Many of these more detailed lectures will include integrated questions so you can test your knowledge of the material. I will also offer quizzes separate from the video lectures. I anticipate covering two models per week and recording approximately one hour of video per model.  FAQ Do I need to buy a textbook? No. I'm working to get all necessary reading material to be available for free on the course web site.  Will I get a certificate after completing this class? Yes. Students who successfully complete the class will receive a certificate signed by the instructor.  Related Courses Loading recommended courses...  Browse more courses Coursera  Coursera provides universal access to the world\u2019s best education, partnering with top universities and organizations to offer courses for anyone to take, for free.  \u00a9 2015 Coursera Inc. All rights reserved.  COMPANY  About People Leadership Careers FRIENDS  Partners Community Programs Developers Translate CONNECT  Google+ Twitter Facebook Blog Tech Blog MORE  Terms Privacy Help Press Contact"
  },
  {
    "courseID": 16,
    "title": "Computer Science 101 - Stanford University | Coursera",
    "url": "https://www.coursera.org/course/cs101",
    "description": "Coursera Courses Specializations Institutions About Log In Sign Up Watch Intro Video  Computer Science 101 CS101 teaches the essential ideas of Computer Science for a zero-prior-experience audience. The course uses small coding experiments in the browser to play with the nature of computers, understanding their strengths and limitations. Sign up for the \"To be announced\" session to be notified by email when the class is next run, and sign up for \"Self-Study\" to start browsing the class materials right away.\u00a0Self-Study mode makes all the videos and assignments available to be done at your own pace, but without a certificate of completion at the end.  Preview Lectures Sessions Join for Free! Course at a Glance  of study 3-5 hours/week English \u4e2d\u6587, Portugu\u00eas & Espa\u00f1ol subtitles Instructors  Nick Parlante Stanford University Categories Computer Science: Software Engineering Share   About the Course UPDATE: we're doing a live, updated MOOC of this course at stanford-online July-2014 (not this Coursera version). See here: http://cs101.class.stanford.edu/   CS101 teaches the essential ideas of Computer Science for a zero-prior-experience audience. Computers can appear very complicated, but in reality, computers work within just a few, simple patterns. CS101 demystifies and brings those patterns to life, which is useful for anyone using computers today.  In CS101, students play and experiment with short bits of \"computer code\" to bring to life to the power and limitations of computers. Everything works within the browser, so there is no extra software to download or install. CS101 also provides a general background on computers today: what is a computer, what is hardware, what is software, what is the internet. No previous experience is required other than the ability to use a web browser.  Here is\u00a0another video\u00a0Nick created for this class.  Course Syllabus CS101 topics are covered with a mixture of video lecture and active lab work, all in the browser:  The nature of computers and code, what they can and cannot do How computer hardware works: chips, cpu, memory, disk Necessary jargon: bits, bytes, megabytes, gigabytes How software works: what is a program, what is \"running\" How digital images work Computer code: loops and logic Big ideas: abstraction, logic, bugs How structured data works How the internet works: ip address, routing, ethernet, wi-fi Computer security: viruses, trojans, and passwords, oh my! Analog vs. digital Digital media, images, sounds, video, compression FAQ What is Self-Study mode?\u00a0 Self-Study mode makes all the videos and assignments available to be done at your own pace, but without a certificate of completion at the end.  Will I get a statement of accomplishment after completing the next run of the class? Yes. Students who successfully complete the class will receive a statement of accomplishment signed by the instructor.  What is the format of the class? The class will consist of lecture videos, which are broken into small chunks, usually between eight and twelve minutes each. Some of these may contain integrated quiz questions. There will also be standalone quizzes that are not part of video lectures, and programming assignments. There will be approximately two hours worth of video content per week.  What sort of written support is there for the lectures? Each lecture comes with written document that parallels the video explanation, so there is something you can review after the lecture that includes all the examples and whatnot. Or put another way, you do not need to take detailed notes of the lecture -- it's already been done for you.  Is any actual work required for this course? Yes. CS101 has a \"lab\" component where students play with short bits of computer code, on their way to understanding the nature of computers.  Is a computer background needed for this course? Not at all. The course assumes zero computer knowledge. Everything you need to do in the labs will first be explained and demonstrated in the lectures.  Do I need any particular software? Everything should work in a recent browser, so that should be simple. We'll have a list of which browser versions we've tested before the course starts.  What computer language is used for CS101? CS101 uses a variant of Javascript. However, the code used in CS101 is very stripped down, avoiding all sorts of boilerplate that would get in the way of learning. As a result, CS101 code does not look like full, professional Javascript code.  Is CS101 a full programming course? No. CS101 uses code to explore the nature of computers, but does not pursue code in the depth of a full programming course. Certainly CS101 students will have a real understanding of what code is and how it works, but not going so far as a full programming course. CS101 is an excellent first step for someone who then wants to take a full programming course.  Related Courses Loading recommended courses...  Browse more courses Coursera  Coursera provides universal access to the world\u2019s best education, partnering with top universities and organizations to offer courses for anyone to take, for free.  \u00a9 2015 Coursera Inc. All rights reserved.  COMPANY  About People Leadership Careers FRIENDS  Partners Community Programs Developers Translate CONNECT  Google+ Twitter Facebook Blog Tech Blog MORE  Terms Privacy Help Press Contact"
  },
  {
    "courseID": 17,
    "title": "Automata - Stanford University | Coursera",
    "url": "https://www.coursera.org/course/automata",
    "description": "Coursera Courses Specializations Institutions About Log In Sign Up Watch Intro Video  Automata This course covers finite automata, context-free grammars, Turing machines, undecidable problems, and intractable problems (NP-completeness).  Preview Lectures Sessions Join for Free! Course at a Glance 6 weeks of study 8-10 hours/week English Instructors  Jeff Ullman Stanford University Categories Computer Science: Theory Share   About the Course I am pleased to be able to offer free over the Internet a course on Automata Theory, based on the material I have taught periodically at Stanford in the course CS154. Participants have access to screencast lecture videos, are given quiz questions, assignments and exams, receive regular feedback on progress, and can participate in a discussion forum. Those who successfully complete the course will receive a statement of accomplishment. You will need a decent Internet connection for accessing course materials, but should be able to watch the videos on your smartphone.  The course covers four broad areas: (1) Finite automata and regular expressions, (2) Context-free grammars, (3) Turing machines and decidability, and (4) the theory of intractability, or NP-complete problems.  Why Study Automata Theory?  This subject is not just for those planning to enter the field of complexity theory, although it is a good place to start if that is your goal. Rather, the course will emphasize those aspects of the theory that people really use in practice. Finite automata, regular expressions, and context-free grammars are ideas that have stood the test of time. They are essential tools for compilers. But more importantly, they are used in many systems that require input that is less general than a full programming language yet more complex than \"push this button.\"  The concepts of undecidable problems and intractable problems serve a different purpose. Undecidable problems are those for which no computer solution can ever exist, while intractable problems are those for which there is strong evidence that, although they can be solved by a computer, they cannot be solved sufficiently fast that the solution is truly useful in practice. Understanding this theory, and in particular being able to prove that a problem you are facing belongs to one of these classes, allows you to justify taking another approach \u2014 simplifying the problem or writing code to approximate the solution, for example.  During the course, I'm going to prove a number of things. The purpose of these proofs is not to torture you or confuse you. Neither are the proofs there because I doubt you would believe me were I merely to state some well-known fact. Rather, understanding how these proofs, especially inductive proofs, work, lets you think more clearly about your own work. I do not advocate proofs that programs are correct, but whenever you attempt something a bit complex, it is good to have in mind the inductive proofs that would be needed to guarantee that what you are doing really works in all cases. Course Syllabus Week 1: Finite Automata Week 2: Regular Expressions and Properties of Regular Languages Week 3: Context-Free Grammars and Languages Week 4: Properties of Context-Free Languages, plus introduction to Turing Machines Week 5: Turing Machines and Undecidability Week 6: Intractable Problems (NP-Completeness)  Recommended Background You should have had a second course in Computer Science \u2014 one that covers basic data structures (e.g., lists, trees, hashing), and basic algorithms (e.g., tree traversals, recursive programming, big-oh running time). In addition, a course in discrete mathematics covering propositional logic, graphs, and inductive proofs is valuable background.  If you need to review or learn some of these topics, there is a free on-line textbook Foundations of Computer Science, written by Al Aho and me, available at\u00a0http://i.stanford.edu/~ullman/focs.html. Recommended chapters include 2 (Recursion and Induction), 3 (Running Time of Programs), 5 (Trees), 6 (Lists), 7 (Sets), 9 (Graphs), and 12 (Propositional Logic). You will also find introductions to finite automata, regular expressions, and context-free grammars in Chapters 10 and 11. Reading Chapter 10 would be good preparation for the first week of the course.  The course includes two programming exercises for which a knowledge of Java or Python\u00a0is required. However, these exercises are optional. You will receive automated feedback, but the results will not be recorded or used to grade the course. So if you are familiar with neither\u00a0Java nor Python, you can still take the course without concern for prerequisites.  Suggested Readings The course is built around the material in Automata Theory, Languages, and Computation 3rd edition (2007), by John Hopcroft, Rajeev Motwani, and Jeffrey Ullman, Addison-Wesley. However, you do not have to buy a copy of this book. The course is self-contained, and all homeworks and exams are based solely on concepts taught in the video lectures.  Course Format 3-4 lecture videos each week. \u00a0Many of these videos are longer than the typical MOOC video, so feel free to pause them and view them in several sessions of your own choice.  There will be 1-2 problem sets each week, which together count for 50% of the marks. \u00a0You can repeat them until you get them all correct, and they are due two Mondays after release of the videos on which they are based.  There are also two optional programming challenges.  FAQ Will I get a statement of accomplishment after completing this class? Yes. Participants who successfully complete the class will receive a statement of accomplishment signed by the instructor.  What is the format of the class? The class will consist of lecture videos, which are between 15 and 45 minutes in length. These contain integrated quiz questions. There will also be standalone homeworks that are not part of video lectures, optional programming assignments, and a (not optional) final exam.  How much work will I be expected to do in this class? You need to work about 5-10 hours per week to complete the course. About 2 hours of video segments each week, containing inline ungraded quiz questions. A weekly, graded multiple choice homework.  Related Courses Loading recommended courses...  Browse more courses Coursera  Coursera provides universal access to the world\u2019s best education, partnering with top universities and organizations to offer courses for anyone to take, for free.  \u00a9 2015 Coursera Inc. All rights reserved.  COMPANY  About People Leadership Careers FRIENDS  Partners Community Programs Developers Translate CONNECT  Google+ Twitter Facebook Blog Tech Blog MORE  Terms Privacy Help Press Contact"
  }
  ]